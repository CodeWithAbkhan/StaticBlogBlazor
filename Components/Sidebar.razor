@inject BlogService blogService
@using StaticBlog3.Models
<div class="position-sticky" style="top: 2rem;">
    <div class="p-4 mb-3 bg-body-tertiary rounded">
        <h3 class="fst-italic">About</h3>
        <p class="mb-0">"Explore the future of static website development with Blazor in .NET 8. Discover how this innovative framework is revolutionizing the creation of high-performance static sites with dynamic capabilities. Learn how to leverage the power of Blazor for responsive, lightning-fast websites in this blog post!</p>
    </div>

    <div>
        <h4 class="fst-italic">Popular posts</h4>
        @if (popularBlogPosts is not null)
        {
            <ul class="list-unstyled">
                @foreach (var blog in popularBlogPosts)
                {
                    <li>
                        <a class="d-flex flex-column flex-lg-row gap-3 align-items-start align-items-lg-center py-3 link-body-emphasis text-decoration-none border-top" href="/@(blog.Slug)">
                            <img width="100" height="82" src=@blog.Thumbnail aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false" loading="lazy">
                            <div class="col-lg-8 ">
                                <h4 class="mb-0">@blog.Title</h4>
                                <small class="text-body-secondary">@blog.Date.ToShortDateString()</small>
                                <small class="text-body-secondary"> <strong class="text-success text-end"> views: @blog.Views</strong></small>
                            </div>
                        </a>
                    </li>
                }


            </ul>
        }
        else
        {
            <div>Loading...</div>
        }

    </div>
</div>

@code {
    [Parameter]
    public List<BlogPost>? BlogPosts { get; set; }
    List<BlogPost> popularBlogPosts;

    protected override async Task OnInitializedAsync()
    {
        if (BlogPosts == null) // Load data only once
        {
            var allBlogPosts = blogService.GetBlogPosts().ToList(); // Load data asynchronously
            popularBlogPosts = allBlogPosts.OrderByDescending(post => post.Views).Take(6).ToList();
        }
        else
        {
            popularBlogPosts = BlogPosts.OrderByDescending(post => post.Views).Take(6).ToList();
        }
    }

}
