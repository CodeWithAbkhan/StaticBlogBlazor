@page "/"
<PageTitle>Home - Blazored Blog</PageTitle>
<HeadContent>
    <meta name="description" content="Blazord Blog Home Page to Display All Blogs" />
</HeadContent>
@using StaticBlog3.Models
@attribute [StreamRendering]
@inject BlogService blogService

@if (displayedBlogPosts == null)
{
    
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
    <div class="row">
         <Hero />
    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="row p-2">
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                                      
                </ul>
               <h2 class="fst-italic">Recent posts</h2>
               <hr/>
                @foreach (var post in displayedBlogPosts)
                {
                <BlogCard post="post"/>
                }
            </div>

            @if (totalPages > 1)
            {
            <nav aria-label="Blog Posts Pagination">
            <ul class="pagination">
                @if (currentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="/blogs/@(currentPage - 1)">Previous</a>
                    </li>
                }

                @for (int page = Math.Max(1, currentPage - 2); page <= Math.Min(totalPages, currentPage + 2); page++)
                {
                    <li class="page-item @(currentPage == page ? "active" : "")">
                        <a class="page-link" href="/blogs/@(page)">@(page)</a>
                    </li>
                }

                @if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="/blogs/@(currentPage + 1)">Next</a>
                    </li>
                }
            </ul>
            </nav>
            }

        </div>
        <div class="col-12 col-md-4">
               <Sidebar BlogPosts=@allBlogPosts />
        </div>
    </div>
    </div>
}

@code {
    private List<BlogPost> allBlogPosts;
    private List<BlogPost> displayedBlogPosts;
    private int pageSize = 5;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling(allBlogPosts.Count / (double)pageSize);
    List<BlogPost> popularBlogPosts;
    protected override async Task OnInitializedAsync()
    {
        if (allBlogPosts == null) // Load data only once
        {
            allBlogPosts = blogService.GetBlogPosts().ToList(); // Load data asynchronously
            popularBlogPosts = allBlogPosts.OrderByDescending(post => post.Views).Take(6).ToList();
        }
        UpdateDisplayedPosts();
    }

    private void UpdateDisplayedPosts()
    {
        displayedBlogPosts = allBlogPosts.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }
}
