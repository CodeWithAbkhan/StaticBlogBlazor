@page "/"
<PageTitle>Home - Blazored Blog</PageTitle>
<HeadContent>
    <meta name="description" content="Blazord Blog Home Page to Display All Blogs" />
</HeadContent>
@using StaticBlog3.Models
@attribute [StreamRendering]
@inject BlogService blogService

@if (displayedBlogPosts != null)
{
    
<div class="container">
    <div class="row">
         <Hero />
    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="row p-2">
               <h2 class="fst-italic">Recent posts</h2>
               <hr/>
                @foreach (var post in displayedBlogPosts)
                {
                        <div class="card mx-2 mb-3 shadow-sm" @key=post.Id>
                        <div class="row">
                            <div class="col-5 p-0">
                                    <img src="@(post.FeaturedImage)"
                                         style="  object-fit: cover; background-repeat:no-repeat;background-position:center;"
                                    class="p-0 border-none"
                               width="100%" height="100%" alt="@post.Description" loading="lazy">
                            </div>
                            <div class="col-7 p-0">
                                    <div class="card-body">
                                        <a href="/@(post.Slug)" style="text-decoration:none;">
                                            <h2 class="card-title">@post.Title</h2>
                                        </a>
                                        <p>@post.Description</p>
                                         <div class="row">
                                            <div class="col">
                                                <p class="text-success">Author</p>
                                            </div>
                                            <div class="col">
                                                <p class="text-secondary text-end">Views: @post.Views</p>
                                            </div>
                                        </div>
                                        <div class="d-flex flex-wrap">
                                            <p class="text-muted mb-0 pb-0"><small>@post.Date.ToShortDateString() in</small></p>
                                        @foreach (var tag in post.Tags)
                                        {
                                                <p class="badge bg-success text-center m-1 mb-0 rounded-2" @key=tag>@tag.ToString()</p>
                                        }
                                        </div>
                                    </div>

                            </div>
                        </div>
                      
                    </div>
                 }
            </div>

            @if (totalPages > 1)
            {
            <nav aria-label="Blog Posts Pagination">
            <ul class="pagination">
                @if (currentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="/blogs/@(currentPage - 1)">Previous</a>
                    </li>
                }

                @for (int page = Math.Max(1, currentPage - 2); page <= Math.Min(totalPages, currentPage + 2); page++)
                {
                    <li class="page-item @(currentPage == page ? "active" : "")">
                        <a class="page-link" href="/blogs/@(page)">@(page)</a>
                    </li>
                }

                @if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="/blogs/@(currentPage + 1)">Next</a>
                    </li>
                }
            </ul>
            </nav>
            }

        </div>
        <div class="col-12 col-md-4">
               <Sidebar BlogPosts=@allBlogPosts />
        </div>
    </div>
    </div>
}
else
{
    <div>Loading...</div>
}

@code {
    private List<BlogPost> allBlogPosts;
    private List<BlogPost> displayedBlogPosts;
    private int pageSize = 5;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling(allBlogPosts.Count / (double)pageSize);
    List<BlogPost> popularBlogPosts;
    protected override async Task OnInitializedAsync()
    {
        if (allBlogPosts == null) // Load data only once
        {
            allBlogPosts = blogService.GetBlogPosts().ToList(); // Load data asynchronously
            popularBlogPosts = allBlogPosts.OrderByDescending(post => post.Views).Take(6).ToList();
        }
        UpdateDisplayedPosts();
    }

    private void UpdateDisplayedPosts()
    {
        displayedBlogPosts = allBlogPosts.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }
}
